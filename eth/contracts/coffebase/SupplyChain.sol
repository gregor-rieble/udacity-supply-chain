pragma solidity >=0.8.10;

// import roles
import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeecore/Ownable.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, ConsumerRole, DistributorRole, FarmerRole, RetailerRole {

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of blocknumbers, 
  // that track its journey through the supply chain.
  mapping (uint => uint[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    uint    retailerPrice; // Reseller price for the retailer set by the distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    uint    consumerPrice; // Reseller price for the consumer set by the retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _price) {
    _;
    uint amountToReturn = msg.value - _price;
    payable(msg.sender).transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased);
    _;
  }

  // Define a modifier that checks if an UPC is still available
  modifier upcAvailable(uint _upc) {
    require(items[_upc].sku == 0);
    _;
  }

  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() payable {
    sku = 1;
    upc = 1;
  }

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function harvestItem(uint _upc, address _originFarmerID, string memory _originFarmName, string memory _originFarmInformation, string  memory _originFarmLatitude, string  memory _originFarmLongitude, string  memory _productNotes) public
  // make sure we are a farmer
  onlyFarmer()
  // _originFarmerID must match current sender
  verifyCaller(_originFarmerID)
  // upc must not yet exist
  upcAvailable(_upc)
  {
    // Add the new item as part of Harvest
    items[_upc] = Item({
      sku: sku,  // Stock Keeping Unit (SKU)
      upc: _upc, // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
      ownerID: _originFarmerID,  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
      originFarmerID: _originFarmerID, // Metamask-Ethereum address of the Farmer
      originFarmName: _originFarmName, // Farmer Name
      originFarmInformation: _originFarmInformation,  // Farmer Information
      originFarmLatitude: _originFarmLatitude, // Farm Latitude
      originFarmLongitude:_originFarmLongitude,  // Farm Longitude
      productID: sku + upc,  // Product ID potentially a combination of upc + sku
      productNotes: _productNotes, // Product Notes
      productPrice: 0, // Product Price
      itemState: defaultState,  // Product State as represented in the enum above
      distributorID: address(0x0),  // Metamask-Ethereum address of the Distributor
      retailerPrice: 0, // Reseller price for the retailer set by the distributor
      retailerID: address(0x0), // Metamask-Ethereum address of the Retailer
      consumerPrice: 0, // Reseller price for the consumer set by the retailer
      consumerID: address(0x0) // Metamask-Ethereum address of the Consumer
    });
    
    // Increment sku
    sku = sku + 1;

    // Emit the appropriate event
    emit Harvested(_upc);

    // Add to transaction history
    itemsHistory[_upc].push(block.number);
  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function processItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  harvested(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].ownerID)
  onlyFarmer()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Processed;
    
    // Emit the appropriate event
    emit Processed(_upc);

    // Add to transaction history
    itemsHistory[_upc].push(block.number);
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  processed(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].ownerID)
  onlyFarmer()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Packed;  
    
    // Emit the appropriate event
    emit Packed(_upc);

    // Add to transaction history
    itemsHistory[_upc].push(block.number);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage
  packed(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].ownerID)
  onlyFarmer()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.ForSale;
    items[_upc].productPrice = _price;
    
    // Emit the appropriate event
    emit ForSale(_upc);

    // Add to transaction history
    itemsHistory[_upc].push(block.number);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc, uint _retailerPrice) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    // only distributors are allowed to buy the items
    onlyDistributor()
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(items[_upc].productPrice)
    {
    // Update the appropriate fields - ownerID, distributorID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender;
    items[_upc].itemState = State.Sold;
    items[_upc].retailerPrice = _retailerPrice;

    // Transfer money to farmer
    payable(items[_upc].originFarmerID).transfer(items[_upc].productPrice);
    
    // emit the appropriate event
    emit Sold(_upc);

    // Add to transaction history
    itemsHistory[_upc].push(block.number);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc, address _retailerID) public
    // Call modifier to check if upc has passed previous supply chain stage
    sold(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].distributorID)
    onlyDistributor()
    {
    // retailer must have the associated role
    require(isRetailer(_retailerID));

    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    items[_upc].retailerID = _retailerID;
    
    // Emit the appropriate event
    emit Shipped(_upc);

    // Add to transaction history
    itemsHistory[_upc].push(block.number);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc, uint _consumerPrice) public payable
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    verifyCaller(items[_upc].retailerID)
    onlyRetailer()
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].retailerPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(items[_upc].retailerPrice)
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].itemState = State.Received;
    items[_upc].consumerPrice = _consumerPrice;

    // retailerID is already updates when the item is shipped, otherwise any retailer could mark not yet received
    // items as received by them (even if they were shipped to another retailer)
    
    // items[_upc].retailerID = msg.sender;

    // Transfer money to distributor
    payable(items[_upc].distributorID).transfer(items[_upc].retailerPrice);

    // Emit the appropriate event
    emit Received(_upc);

    // Add to transaction history
    itemsHistory[_upc].push(block.number);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) public payable
    // Call modifier to check if upc has passed previous supply chain stage
    received(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyConsumer()
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].consumerPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(items[_upc].consumerPrice)
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;
    items[_upc].itemState = State.Purchased;

    // Transfer money to retailer
    payable(items[_upc].retailerID).transfer(items[_upc].consumerPrice);

    // Emit the appropriate event
    emit Purchased(_upc);

    // Add to transaction history
    itemsHistory[_upc].push(block.number);
  }

  // Define a function 'getRoles' that will return information on which roles the current
  // caller has
  function getRoles() public view returns
  (
    bool  owner,
    bool  farmer,
    bool  distributor,
    bool  retailer,
    bool  consumer
  )
  {
    owner = isOwner();
    farmer = isFarmer(msg.sender);
    distributor = isDistributor(msg.sender);
    retailer = isRetailer(msg.sender);
    consumer = isConsumer(msg.sender);

    return (
      owner,
      farmer,
      distributor,
      retailer,
      consumer
    );
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFarmerID,
  string memory originFarmName,
  string memory originFarmInformation,
  string memory originFarmLatitude,
  string memory originFarmLongitude
  ) 
  {
  // Assign values to the 8 parameters
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  ownerID = items[_upc].ownerID;
  originFarmerID = items[_upc].originFarmerID;
  originFarmName = items[_upc].originFarmName;
  originFarmInformation = items[_upc].originFarmInformation;
  originFarmLatitude = items[_upc].originFarmLatitude;
  originFarmLongitude = items[_upc].originFarmLongitude;
    
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originFarmerID,
  originFarmName,
  originFarmInformation,
  originFarmLatitude,
  originFarmLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string memory productNotes,
  uint    productPrice,
  uint    itemState,
  address distributorID,
  address retailerID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  productID = items[_upc].productID;
  productNotes = items[_upc].productNotes;
  productPrice = items[_upc].productPrice;
  itemState = uint(items[_upc].itemState);
  distributorID = items[_upc].distributorID;
  retailerID = items[_upc].retailerID;
  consumerID = items[_upc].consumerID;
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
  );
  }

  // Define a function 'fetchItemBufferThree' that fetches the data
  function fetchItemBufferThree(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string memory productNotes,
  uint    productPrice,
  uint    retailerPrice,
  uint    consumerPrice,
  uint   itemState
  ) 
  {
    // Assign values to the 9 parameters
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  productID = items[_upc].productID;
  productNotes = items[_upc].productNotes;
  productPrice = items[_upc].productPrice;
  retailerPrice = items[_upc].retailerPrice;
  consumerPrice = items[_upc].consumerPrice;
  itemState = uint(items[_upc].itemState);
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  retailerPrice,
  consumerPrice,
  itemState
  );
  }

  // Define a function that will return the blocknumbers involed within an items lifecycle
  function getItemsHistory(uint _upc, uint _page)  public view returns (
    uint totalTransactions, 
    uint blockNo1, 
    uint blockNo2, 
    uint blockNo3, 
    uint blockNo4, 
    uint blockNo5, 
    uint blockNo6, 
    uint blockNo7, 
    uint blockNo8, 
    uint blockNo9, 
    uint blockNo10
  ) {
    totalTransactions = itemsHistory[_upc].length;

    uint offset = _page * 10;

    if(totalTransactions > offset) {
      blockNo1 = itemsHistory[_upc][offset];
    }
    offset++;
    
    if(totalTransactions > offset) {
      blockNo2 = itemsHistory[_upc][offset];
    }
    offset++;
    
    if(totalTransactions > offset) {
      blockNo3 = itemsHistory[_upc][offset];
    }
    offset++;
    
    if(totalTransactions > offset) {
      blockNo4 = itemsHistory[_upc][offset];
    }
    offset++;
    
    if(totalTransactions > offset) {
      blockNo5 = itemsHistory[_upc][offset];
    }
    offset++;
    
    if(totalTransactions > offset) {
      blockNo6 = itemsHistory[_upc][offset];
    }
    offset++;
    
    if(totalTransactions > offset) {
      blockNo7 = itemsHistory[_upc][offset];
    }
    offset++;
    
    if(totalTransactions > offset) {
      blockNo8 = itemsHistory[_upc][offset];
    }
    offset++;
    
    if(totalTransactions > offset) {
      blockNo9 = itemsHistory[_upc][offset];
    }
    offset++;
    
    if(totalTransactions > offset) {
      blockNo10 = itemsHistory[_upc][offset];
    }

    return (
      totalTransactions, 
      blockNo1, 
      blockNo2, 
      blockNo3, 
      blockNo4, 
      blockNo5, 
      blockNo6, 
      blockNo7, 
      blockNo8, 
      blockNo9, 
      blockNo10
    );
  }
}